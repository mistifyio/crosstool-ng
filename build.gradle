buildscript {
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        dependencies {
            classpath 'org.ysb33r.gradle:gnumake:1.0.2'
            classpath 'nu.studer:gradle-credentials-plugin:1.0.1'
        }
    }
}


ext.buildOutputDir = "${buildDir}/compiledOutput" as File
ext.downloadDir = "${buildDir}/downloads" as File
ext.configFile = configFile as File

ext.config = new Properties()
config.load(configFile.newDataInputStream())

ext.kernelVersion = getStrippedConfigValue('CT_KERNEL_VERSION')

logger.quiet "Toolchain download dir: '${downloadDir}'"
logger.quiet "Toolchain build output dir: '${buildOutputDir}'"
logger.quiet "Toolchain kernel headers version: '${kernelVersion}'"


apply plugin: 'distribution'

group = 'org.mistify'

ext.buildNumber = project.hasProperty('buildNumber') ? buildNumber : '99999'
version = versionNumber + ".${buildNumber}"



task createBuildDirs() {
    outputs.files buildOutputDir, downloadDir

    doLast {
        buildOutputDir.mkdirs()
        downloadDir.mkdirs()
    }
}

task copyCustomConfig() << {
    //We're using an ANT copy here instead of a Gradle copy because
    // Gradle does not like copying files into the rootDir
    description "Copies ${configFile} to ${rootDir}/.confi" +
            "g"
    ant.copy(file: configFile, tofile: "$rootDir/.config")
}

task bootstrapToolchain(type: Exec, dependsOn: [createBuildDirs, copyCustomConfig]) {
    description "Runs ./bootstrap for toolchain configuration"

    outputs.file "$rootDir/config.status"
    outputs.file "$rootDir/.config"

    commandLine 'bash', '-c', './bootstrap'
}

task configureToolchain(type: Exec, dependsOn: bootstrapToolchain) {
    description "Runs ./configure for toolchain configuration"

    outputs.file "$rootDir/config.status"
    outputs.upToDateWhen { !bootstrapToolchain.didWork }

    commandLine 'bash', '-c', "./configure --enable-local --prefix=${rootDir}"
}

apply plugin: 'org.ysb33r.gnumake'

makeClean {
    description "Runs make clean on toolchain configuration"
    group "Toolchain configuration"
}

make {
    description "Runs make build for toolchain configuration - WILL BE REMOVED OR CONSOLIDATED WITH 'makeBuild' task"
    group "Toolchain configuration"

    makeOutputs{
        file "$rootDir/ct-ng"
    }

    mustRunAfter makeClean
    dependsOn copyCustomConfig, configureToolchain
}

makeBuild {
    description "Runs make build for toolchain configuration"
    group "Toolchain configuration"

    outputs.file "$rootDir/ct-ng"
    outputs.upToDateWhen { !configureToolchain.didWork }

    mustRunAfter makeClean
    dependsOn copyCustomConfig, configureToolchain
}



task generateMenuConfig(type: Exec, dependsOn: [makeBuild], group: 'Toolchain') {
    description "~WIP~ Executes ./ct-ng menuconfig to configure toolchain"

    environment TC_PREFIX: arch, TC_ARCH_SUFFIX: "${versionExtra}-${version}",
            TC_PREFIX_DIR: buildOutputDir, TC_LOCAL_TARBALLS_DIR: downloadDir

    commandLine 'bash', '-c', './ct-ng menuconfig'
}

task cleanToolchain(type: Exec) {
    description "Executes ./ct-ng distclean - Clean actual toolchain output"

    environment TC_PREFIX: arch, TC_ARCH_SUFFIX: "${versionExtra}-${version}",
            TC_PREFIX_DIR: buildOutputDir, TC_LOCAL_TARBALLS_DIR: downloadDir

    commandLine 'bash', '-c', './ct-ng distclean'
}

task buildToolchain(type: Exec, dependsOn: makeBuild) {
    description "Executes ./ct-ng build - Builds actual toolchain"

    environment TC_PREFIX: arch, TC_ARCH_SUFFIX: "${versionExtra}-${version}",
            TC_PREFIX_DIR: buildOutputDir, TC_LOCAL_TARBALLS_DIR: downloadDir

    commandLine 'bash', '-c', './ct-ng build'
}


task printVersion(description: "Print current build version number") << {
    println version
}

task build(dependsOn: [buildToolchain], group: 'Toolchain'){
    description "Executes toolchain configuration and ct-ng build"
}

task clean(type: Delete, group: 'Toolchain', dependsOn: cleanToolchain) {
    description "Deletes ONLY crosstool-ng build output"
    delete buildOutputDir
}

task fullClean(type: Delete, dependsOn: clean, group: 'Toolchain') {
    description "Wipes everything build outputs, autoconfigure, and toolchain make build ouput"

    delete "${rootDir}/.config"
    delete "${rootDir}/config.status"
}

tasks.withType(Exec) {
    doFirst { logger.quiet "CMD: '${it.commandLine.join(' ')}'" }
}



distributions {
    main {
        baseName = versionExtra ? "${project.name}-${arch}-${versionExtra}" : "${project.name}-${arch}"
        contents {
            from buildOutputDir
        }
    }
}

distTar {
    compression = Compression.GZIP
}


apply plugin: 'nu.studer.credentials'

ext.s3Key = credentials.s3


apply plugin: 'maven-publish'

publishing {
    repositories {
        maven {
            url "s3://omniti-mystify-artifacts/libs-release-local"
            credentials(AwsCredentials) {
                accessKey 'AKIAIVD4UP67JBMGTSRA'
                secretKey s3Key
            }
        }
    }

    publications {
        toolchain(MavenPublication) {
            artifactId distTar.baseName
            artifact distTar
        }
    }
}



task wrapper(type: Wrapper) {
    description "Generates gradlew scripts for a specified gradle version"
    gradleVersion = '2.4'
}

def getStrippedConfigValue(String keyName) {
    config.getProperty(keyName).replaceAll(/^"/, '').replaceAll(/"$/, '').trim()
}